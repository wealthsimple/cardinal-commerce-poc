<!--
  Songbird Docs: https://cardinaldocs.atlassian.net/wiki/spaces/CC/pages/557065/Songbird.js
-->
<!DOCTYPE html>
<html>
  <head>
    <title>Cardinal 3DS Hybrid Demo</title>
    <meta charset="utf-8">
    <!-- <script src="https://songbirdstag.cardinalcommerce.com/cardinalcruise/v1/songbird.js"></script> -->
    <script src="https://songbirdstag.cardinalcommerce.com/edge/v1/songbird.js"></script>
  </head>
  <body>
    <h1>Cardinal 3DS Songbird Demo</h1>
    <pre>Open up JS console to view verbose logs.</pre>
    <h4>Cardinal Transactional JWT <textarea><%= locals[:cardinal_jwt] %></textarea></h4>
    <h4>Order Number <pre><%= locals[:order_number] %></pre></h4>
    <h4>Order Amount <pre>$<%= locals[:order_amount] %> (Currency Code: <%= locals[:order_currency_code] %>)</pre></h4>
    <h4>DfReferenceId <pre id='df-reference-id'>loading...</pre></h4>

    <button id="submit-order-button">Submit Transaction</button>

    <div id="Cardinal-Payments"></div>

    <script>
      // Values that Wealthsimple will generate or have access to:
      const orderNumber = "<%= locals[:order_number] %>";
      const orderAmount = "<%= locals[:order_amount] %>";
      const cardBin = "<%= locals[:card_bin] %>";
      const cardinalJwt = "<%= locals[:cardinal_jwt] %>";

      Cardinal.on('payments.setupComplete', function(setupCompleteData) {
        console.log('Cardinal payments.setupComplete', { setupCompleteData });

        const dfReferenceId = setupCompleteData.sessionId
        document.querySelector('#df-reference-id').innerText = dfReferenceId;

        document.querySelector('#submit-order-button').addEventListener('click', function() {
          console.log('Submitting transaction...');

        });

        console.log('Processing BIN...')
        Cardinal.trigger("bin.process", cardBin)
          .then(function(results){
            console.log('bin.process results:', results);
            if(results.Status) {
                // Bin profiling was successful. Some merchants may want to only move forward with CCA if profiling was successful
                console.log('bin.process succeeded!');
            } else {
                // Bin profiling failed
                console.log('bin.process failed!');
            }

            // Bin profiling, if this is the card the end user is paying with you may start the CCA flow at this point
            // Cardinal.start('cca', myOrderObject);
          })
          .catch(function(error){
            // An error occurred during profiling
            console.log('bin.process error:', error);
          });
      });

      Cardinal.on('payments.validated', function(decodedResponseData, responseJWT){
        console.log('Cardinal payments.payments.validated', { decodedResponseData, responseJWT });

        switch (decodedResponseData.ActionCode) {
          case "SUCCESS":
          // Handle successful transaction, send JWT to backend to verify
          break;

          case "NOACTION":
          // Handle no actionable outcome
          break;

          case "FAILURE":
          // Handle failed transaction attempt
          break;

          case "ERROR":
          // Handle service level error
          break;
        }
      });

      Cardinal.configure({
        logging: {
          level: "verbose", // or "on", "off"
        },
        timeout: 6000,
        extendedtimeout: 4000,
        maxRequestRetries: 2,
        button:{
          containerId: 'Cardinal-Payments'
        },
        payment:{
          view: 'modal',
          framework: 'cardinal',
          displayLoading: true,
          displayExitButton: true
        }
      });

      Cardinal.setup('init', {
        'jwt': cardinalJwt,
      });
    </script>
  </body>
</html>
