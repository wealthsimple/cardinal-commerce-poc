<!--
  Songbird Docs: https://cardinaldocs.atlassian.net/wiki/spaces/CC/pages/557065/Songbird.js
-->
<!DOCTYPE html>
<html>
  <head>
    <title></title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- TODO: use different url here for prod: -->
    <script src="https://songbirdstag.cardinalcommerce.com/edge/v1/songbird.js"></script>
  </head>
  <body>
    <!-- This iframe allows for device data collection after BIN Intelligence API response is received: -->
    <iframe id="device-data-collection-iframe" height="10" width="10" style="visibility: hidden; position: absolute; top: -1000px; left: -1000px;"></iframe>

    <div id="Cardinal-Payments"></div>
    <div id="my-visible-wrapper">
      <h1>Loading spinner...</h1>
    </div>
    <div id="my-hidden-wrapper"></div>

    <script>
      // Values that Wealthsimple will generate or have access to:
      let threeDSMetadata;

      fetch('/cardinal_init_metadata')
        .then(res => res.json())
        .then((data) => {
          console.log('Fetched 3DS metadata:', data);
          threeDSMetadata = data;

          fetch('/accounts/TabaPayAccount123/proxy_bin_intelligence', {
            method: 'POST',
            headers: {
              'Accept': 'application/json',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              jti: threeDSMetadata.jti,
              order_number: threeDSMetadata.order_number,
            })
          })
            .then(res => res.json())
            .then(binIntelligenceResponse => {
              console.log('BIN Intelligence success:', binIntelligenceResponse);
              // Use the BIN intelligence response to initiate device data collection:
              // https://cardinaldocs.atlassian.net/wiki/spaces/CC/pages/1106575397/PART+2+-+JWT+-+ReferenceId+passed+in+JWT

              window.addEventListener("message", (event) => {
                // Note: this is quite noisy, with lots of potential events from various
                // sources including browser extensions:
                if (event.origin === 'http://localhost:4567' && event.data === 'completed_device_data_collection') {
                  Cardinal.setup('init', {
                    'jwt': binIntelligenceResponse.authentication_jwt,
                  });
                }
              }, false);

              document.querySelector('#device-data-collection-iframe').src = `http://localhost:4567/device_data_collection?authentication_jwt=${binIntelligenceResponse.authentication_jwt}`;
            });
        })
        .catch(e => console.log("error fetching 3ds metadata:", e));

      Cardinal.on('payments.setupComplete', function(setupCompleteData) {
        console.log('Cardinal payments.setupComplete', { setupCompleteData });

        const dfReferenceId = setupCompleteData.sessionId;
        console.log('Submitting transaction...');
        fetch('/accounts/TabaPayAccount123/proxy_cmpi_lookup', {
          method: 'POST',
          headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            df_reference_id: dfReferenceId,
            order_number: threeDSMetadata.order_number,
            // In actual implementation, these would be sent by our backend to TabaPay:
            order_amount: threeDSMetadata.order_amount,
            order_currency_code: threeDSMetadata.order_currency_code,
          })
        })
          .then(res => res.json())
          .then(data => {
            console.log('Submit transaction success. Continuing CCA flow...', data);
            Cardinal.continue('cca',
              {
                AcsUrl: data.CardinalMPI.ACSUrl,
                Payload: data.CardinalMPI.Payload
              },
              // https://cardinaldocs.atlassian.net/wiki/spaces/CC/pages/32950/Request+Objects#RequestObjects-OrderObject
              {
                OrderDetails: {
                  OrderNumber: threeDSMetadata.order_number,
                  Amount: threeDSMetadata.order_amount,
                  CurrencyCode: threeDSMetadata.order_currency_code,
                  OrderChannel: 'P',
                  TransactionId: data.CardinalMPI.TransactionId,
                },
              },
            );
          })
          .catch(e => console.log('Submit transaction error:', e));
      });

      Cardinal.on('payments.validated', function(decodedResponseData, responseJWT){
        console.log('Cardinal payments.payments.validated', { decodedResponseData, responseJWT });

        switch (decodedResponseData.ActionCode) {
          case "SUCCESS":
          break;

          case "NOACTION":
          // Handle no actionable outcome
          break;

          case "FAILURE":
          // Handle failed transaction attempt
          break;

          case "ERROR":
          // Handle service level error
          break;
        }
      });

      Cardinal.on('ui.inline.setup', function (htmlTemplate, details, resolve, reject) {
        console.log('ui.inline.setup:', { htmlTemplate, details });
        try {
          var container; // The element we will inject the HTML template into
          if (htmlTemplate !== undefined && details !== undefined) {
            // Depending on your integration you may need to account for other items when processing different payment types
            switch (details.paymentType) {
              case 'CCA':
                // Process CCA authentication screen
                switch (details.data.mode) {
                  case 'static':
                    // Inject Iframe into DOM in visible spot
                    container = document.getElementById('my-visible-wrapper');
                    break;

                  case 'suppress':
                    // Inject Iframe into DOM out of view
                    container = document.getElementById('my-hidden-wrapper');
                    break;
                  default:
                    throw new Error("Unsupported inline mode found [" + details.data.mode + "]");
                }

                break;
              default:
                throw new Error("Unsupported inline payment type found [" + details.paymentType + "]");
            }
            // Because the template we get from Songbird is a string template, we need to inject it as innerHTML
            container.innerHTML = htmlTemplate;
            // Inform Songbird that we have successfully injected the iframe into the DOM and the transaction can proceed forward
            resolve();
          } else {
            throw new Error("Unable to process request due to invalid arguments");
          }

        } catch (error) {
          // An error occurred, we need to inform Songbird that an error occurred so Songbird can abondon the transaction and trigger the 'payments.validated' event with an error
          reject(error);
        }
      });

      Cardinal.configure({
        logging: {
          level: "verbose", // or "on", "off"
        },
        timeout: 6000,
        extendedtimeout: 4000,
        maxRequestRetries: 2,
        button:{
          containerId: 'Cardinal-Payments'
        },
        payment:{
          framework: 'inline'
        }
      });
    </script>
  </body>
</html>
