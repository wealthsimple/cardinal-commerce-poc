<!--
  Songbird Docs: https://cardinaldocs.atlassian.net/wiki/spaces/CC/pages/557065/Songbird.js
-->
<!DOCTYPE html>
<html>
  <head>
    <title>Wealthsimple Cardinal 3DS Hybrid Demo</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- <script src="https://songbirdstag.cardinalcommerce.com/cardinalcruise/v1/songbird.js"></script> -->
    <script src="https://songbirdstag.cardinalcommerce.com/edge/v1/songbird.js"></script>
  </head>
  <body>
    <h1>Wealthsimple Cardinal 3DS Songbird Demo</h1>
    <pre>Open up JS console to view verbose logs.</pre>
    <h4>Order Number <pre id="order-number">loading...</pre></h4>
    <h4>Order Amount (in cents) <pre><span id="order-amount">loading...</span> (Currency Code: <span id="order-currency-code">loading...</span>)</pre></h4>
    <h4>DfReferenceId <pre id='df-reference-id'>loading...</pre></h4>
    <h4>3DS Result</h4>
    <pre id="threeds-result">Awaiting results...</pre>

    <button id="submit-order-button">Submit Transaction</button>

    <div id="Cardinal-Payments"></div>
    <div id="my-visible-wrapper"></div>
    <div id="my-hidden-wrapper"></div>

    <script>
      // Values that Wealthsimple will generate or have access to:
      let threeDSMetadata;

      fetch('/cardinal_init_metadata')
        .then(res => res.json())
        .then((data) => {
          console.log('Fetched 3DS metadata:', data);
          threeDSMetadata = data;

          document.querySelector('#order-number').innerText = threeDSMetadata.order_number;
          document.querySelector('#order-amount').innerText = threeDSMetadata.order_amount;
          document.querySelector('#order-currency-code').innerText = threeDSMetadata.order_currency_code;

          Cardinal.setup('init', {
            'jwt': threeDSMetadata.cardinal_jwt,
          });
        })
        .catch(e => console.log("error fetching 3ds metadata:", e));

      Cardinal.on('payments.setupComplete', function(setupCompleteData) {
        console.log('Cardinal payments.setupComplete', { setupCompleteData });

        const dfReferenceId = setupCompleteData.sessionId;
        document.querySelector('#df-reference-id').innerText = dfReferenceId;

        document.querySelector('#submit-order-button').addEventListener('click', function() {
          console.log('Submitting transaction...');
          fetch('/accounts/TabaPayAccount123/proxy_cmpi_lookup', {
            method: 'POST',
            headers: {
              'Accept': 'application/json',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              df_reference_id: dfReferenceId,
              order_number: threeDSMetadata.order_number,
              // In actual implementation, these would be sent by our backend to TabaPay:
              order_amount: threeDSMetadata.order_amount,
              order_currency_code: threeDSMetadata.order_currency_code,
            })
          })
            .then(res => res.json())
            .then(data => {
              console.log('Submit transaction success. Continuing CCA flow...', data);
              Cardinal.continue('cca',
                {
                  AcsUrl: data.CardinalMPI.ACSUrl,
                  Payload: data.CardinalMPI.Payload
                },
                // https://cardinaldocs.atlassian.net/wiki/spaces/CC/pages/32950/Request+Objects#RequestObjects-OrderObject
                {
                  OrderDetails: {
                    OrderNumber: threeDSMetadata.order_number,
                    Amount: threeDSMetadata.order_amount,
                    CurrencyCode: threeDSMetadata.order_currency_code,
                    OrderChannel: 'P',
                    TransactionId: data.CardinalMPI.TransactionId,
                  },
                },
              );
            })
            .catch(e => console.log('Submit transaction error:', e));
        });

        console.log('TODO: we will need to initiate DeviceDataCollection here');
        // TODO: implement this: https://cardinaldocs.atlassian.net/wiki/spaces/CC/pages/1106575397/PART+2+-+JWT+-+ReferenceId+passed+in+JWT

        // Cardinal.trigger("bin.process", threeDSMetadata.card_bin)
        //   .then(function(results){
        //     console.log('bin.process results:', results);
        //     if(results.Status) {
        //         // Bin profiling was successful. Some merchants may want to only move forward with CCA if profiling was successful
        //         console.log('bin.process succeeded!');
        //     } else {
        //         // Bin profiling failed
        //         console.log('bin.process failed!');
        //     }

        //     // Bin profiling, if this is the card the end user is paying with you may start the CCA flow at this point
        //     // Cardinal.start('cca', myOrderObject);
        //   })
        //   .catch(function(error){
        //     // An error occurred during profiling
        //     console.log('bin.process error:', error);
        //   });
      });

      Cardinal.on('payments.validated', function(decodedResponseData, responseJWT){
        console.log('Cardinal payments.payments.validated', { decodedResponseData, responseJWT });

        switch (decodedResponseData.ActionCode) {
          case "SUCCESS":
          // Handle successful transaction, send JWT to backend to verify
          document.querySelector('#threeds-result').innerText = JSON.stringify(decodedResponseData, null, 2);
          break;

          case "NOACTION":
          // Handle no actionable outcome
          break;

          case "FAILURE":
          // Handle failed transaction attempt
          break;

          case "ERROR":
          // Handle service level error
          break;
        }
      });

      Cardinal.on('ui.inline.setup', function (htmlTemplate, details, resolve, reject) {
        console.log('ui.inline.setup:', { htmlTemplate, details });
        try {
          var container; // The element we will inject the HTML template into
          if (htmlTemplate !== undefined && details !== undefined) {
            // Depending on your integration you may need to account for other items when processing different payment types
            switch (details.paymentType) {
              case 'CCA':
                // Process CCA authentication screen
                switch (details.data.mode) {
                  case 'static':
                    // Inject Iframe into DOM in visible spot
                    container = document.getElementById('my-visible-wrapper');
                    break;

                  case 'suppress':
                    // Inject Iframe into DOM out of view
                    container = document.getElementById('my-hidden-wrapper');
                    break;
                  default:
                    throw new Error("Unsupported inline mode found [" + details.data.mode + "]");
                }

                break;
              default:
                throw new Error("Unsupported inline payment type found [" + details.paymentType + "]");
            }
            // Because the template we get from Songbird is a string template, we need to inject it as innerHTML
            container.innerHTML = htmlTemplate;
            // Inform Songbird that we have successfully injected the iframe into the DOM and the transaction can proceed forward
            resolve();
          } else {
            throw new Error("Unable to process request due to invalid arguments");
          }

        } catch (error) {
          // An error occurred, we need to inform Songbird that an error occurred so Songbird can abondon the transaction and trigger the 'payments.validated' event with an error
          reject(error);
        }
      });

      Cardinal.configure({
        logging: {
          level: "verbose", // or "on", "off"
        },
        timeout: 6000,
        extendedtimeout: 4000,
        maxRequestRetries: 2,
        button:{
          containerId: 'Cardinal-Payments'
        },
        payment:{
          framework: 'inline'
        }
      });
    </script>
  </body>
</html>
